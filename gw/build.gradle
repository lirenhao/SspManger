/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'org.springframework.boot' version '2.3.1.RELEASE'
}

apply plugin: 'io.spring.dependency-management'

group 'com.yada'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR6"
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'com.nulab-inc:zxcvbn:1.3.0'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
    implementation 'commons-codec:commons-codec:1.14'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api'
    implementation 'org.glassfish.jaxb:jaxb-runtime'
    implementation 'com.hazelcast:hazelcast:3.12.6'
    implementation 'com.hazelcast:hazelcast-client:3.12.6'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'io.projectreactor:reactor-test'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task("buildApp") {
    group("app")
    description("build app")
    doLast {
        exec {
            workingDir("../admin")
            commandLine "npm", "install"
        }
        exec {
            workingDir("../admin")
            commandLine "npm", "run", "build"
        }
        exec {
            workingDir("../app")
            commandLine "npm", "install"
        }
        exec {
            workingDir("../app")
            commandLine "npm", "run", "build"
        }
    }
}

task("copyApp") {
    group("app")
    description("copy app build output")
    doLast {
        copy {
            from '../admin/dist'
            into 'src/main/resources/static/admin'
            exclude("index.html")
        }
        copy {
            from '../admin/dist/index.html'
            into 'src/main/resources/templates/admin'
        }
        copy {
            from '../app/dist'
            into 'src/main/resources/static/ssp'
            exclude("index.html")
        }
        copy {
            from '../admin/dist/index.html'
            into 'src/main/resources/templates'
        }
    }
}

task("deleteApp") {
    group("app")
    description("delete copy app")
    doLast {
        delete "src/main/resources/static/admin"
        delete "src/main/resources/templates/admin/index.html"
        delete "src/main/resources/static/ssp"
        delete "src/main/resources/templates/index.html"
    }
}

task("buildDev") {
    group("build")
    description("build dev env")
    buildApp.mustRunAfter("deleteApp")
    copyApp.mustRunAfter("buildApp")
}.dependsOn("clean", "deleteApp", "buildApp", "copyApp")

task("buildSvc") {
    group("svc")
    description("build svc")
    doLast {
        exec {
            workingDir "../svc"
            commandLine "mvn", "clean", "package"
        }
    }
}

task("buildGw") {
    group("svc")
    description("build gw svc")
    buildApp.mustRunAfter("deleteApp")
    copyApp.mustRunAfter("buildApp")
    bootJar.mustRunAfter("copyApp")
    bootJar.mustRunAfter("clean")
}.dependsOn("clean", "deleteApp", "buildApp", "copyApp", "bootJar")


task("deleteJar") {
    group("svc")
    description("delete build output")
    doLast {
        delete "../dist"
    }
}

task("copyJar") {
    group("svc")
    description("copy build jar output to dist")
    doLast {
        copy {
            from '../gw/build/libs/gw-1.0-SNAPSHOT.jar'
            into '../dist/gw'
        }
        copy {
            from '../gw/src/main/resources'
            into '../dist/gw'
            include('*.*')
        }
        copy {
            from '../svc/target/svc-0.0.1-SNAPSHOT.jar'
            into '../dist/ssp'
        }
        copy {
            from '../svc/src/main/resources'
            into '../dist/ssp'
            include('application*', '*.xml')
        }
    }
}

task("buildAll") {
    group("build")
    description("build all output to dist")
    copyJar.mustRunAfter("deleteJar")
    copyJar.mustRunAfter("buildGw")
    copyJar.mustRunAfter("buildSvc")
}.dependsOn("deleteJar", "buildGw", "buildSvc", "copyJar")
